// Dependencies
const fs = require('fs');
const http = require('http');
const https = require('https');

let app = require('../app');

// Certificate
let privateKey  = fs.readFileSync('/etc/letsencrypt/live/mimiel.es/privkey.pem', 'utf8');
let certificate = fs.readFileSync('/etc/letsencrypt/live/mimiel.es/fullchain.pem', 'utf8');
credentials = {key: privateKey, cert: certificate};


// catch 404 and forward to error handler
app.use((req, res, next) => {
  const err = new Error('Not Found');
  err.status = 404;
  next(err);
});

app.use((err, req, res, next) => {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = process.env.ENV === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
}); // Express middleware to handle errors

// Starting both http & https servers
let server = http.createServer(app);
let httpsServer = https.createServer(credentials, app);

server.on('error', error => {
  if (error.syscall !== 'listen') { throw error }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT}is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

server.listen(`${process.env.PORT}`, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});

httpsServer.listen(`${process.env.HTTPS_PORT}`, () => {
	console.log('HTTPS Server running on port 443');
});
